// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Telemetry.proto

package org.springblade.uav.proto;

public final class Telemetry {
  private Telemetry() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TelemetryDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TelemetryData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double lng = 1;</code>
     */
    double getLng();

    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double lat = 2;</code>
     */
    double getLat();

    /**
     * <pre>
     *海拔高度
     * </pre>
     *
     * <code>float altitude = 3;</code>
     */
    float getAltitude();

    /**
     * <pre>
     *相对高度
     * </pre>
     *
     * <code>float ultrasonic = 4;</code>
     */
    float getUltrasonic();

    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>float pitch = 5;</code>
     */
    float getPitch();

    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>float roll = 6;</code>
     */
    float getRoll();

    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>float yaw = 7;</code>
     */
    float getYaw();

    /**
     * <pre>
     *空速
     * </pre>
     *
     * <code>float airspeed = 8;</code>
     */
    float getAirspeed();

    /**
     * <pre>
     *地速
     * </pre>
     *
     * <code>float velocity = 9;</code>
     */
    float getVelocity();

    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>uint64 timestamp = 10;</code>
     */
    long getTimestamp();
  }
  /**
   * Protobuf type {@code TelemetryData}
   */
  public  static final class TelemetryData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:TelemetryData)
      TelemetryDataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TelemetryData.newBuilder() to construct.
    private TelemetryData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelemetryData() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new TelemetryData();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              lng_ = input.readDouble();
              break;
            }
            case 17: {

              lat_ = input.readDouble();
              break;
            }
            case 29: {

              altitude_ = input.readFloat();
              break;
            }
            case 37: {

              ultrasonic_ = input.readFloat();
              break;
            }
            case 45: {

              pitch_ = input.readFloat();
              break;
            }
            case 53: {

              roll_ = input.readFloat();
              break;
            }
            case 61: {

              yaw_ = input.readFloat();
              break;
            }
            case 69: {

              airspeed_ = input.readFloat();
              break;
            }
            case 77: {

              velocity_ = input.readFloat();
              break;
            }
            case 80: {

              timestamp_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Telemetry.internal_static_TelemetryData_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Telemetry.internal_static_TelemetryData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TelemetryData.class, Builder.class);
    }

    public static final int LNG_FIELD_NUMBER = 1;
    private double lng_;
    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double lng = 1;</code>
     */
    public double getLng() {
      return lng_;
    }

    public static final int LAT_FIELD_NUMBER = 2;
    private double lat_;
    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double lat = 2;</code>
     */
    public double getLat() {
      return lat_;
    }

    public static final int ALTITUDE_FIELD_NUMBER = 3;
    private float altitude_;
    /**
     * <pre>
     *海拔高度
     * </pre>
     *
     * <code>float altitude = 3;</code>
     */
    public float getAltitude() {
      return altitude_;
    }

    public static final int ULTRASONIC_FIELD_NUMBER = 4;
    private float ultrasonic_;
    /**
     * <pre>
     *相对高度
     * </pre>
     *
     * <code>float ultrasonic = 4;</code>
     */
    public float getUltrasonic() {
      return ultrasonic_;
    }

    public static final int PITCH_FIELD_NUMBER = 5;
    private float pitch_;
    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>float pitch = 5;</code>
     */
    public float getPitch() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 6;
    private float roll_;
    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>float roll = 6;</code>
     */
    public float getRoll() {
      return roll_;
    }

    public static final int YAW_FIELD_NUMBER = 7;
    private float yaw_;
    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>float yaw = 7;</code>
     */
    public float getYaw() {
      return yaw_;
    }

    public static final int AIRSPEED_FIELD_NUMBER = 8;
    private float airspeed_;
    /**
     * <pre>
     *空速
     * </pre>
     *
     * <code>float airspeed = 8;</code>
     */
    public float getAirspeed() {
      return airspeed_;
    }

    public static final int VELOCITY_FIELD_NUMBER = 9;
    private float velocity_;
    /**
     * <pre>
     *地速
     * </pre>
     *
     * <code>float velocity = 9;</code>
     */
    public float getVelocity() {
      return velocity_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 10;
    private long timestamp_;
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>uint64 timestamp = 10;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (lng_ != 0D) {
        output.writeDouble(1, lng_);
      }
      if (lat_ != 0D) {
        output.writeDouble(2, lat_);
      }
      if (altitude_ != 0F) {
        output.writeFloat(3, altitude_);
      }
      if (ultrasonic_ != 0F) {
        output.writeFloat(4, ultrasonic_);
      }
      if (pitch_ != 0F) {
        output.writeFloat(5, pitch_);
      }
      if (roll_ != 0F) {
        output.writeFloat(6, roll_);
      }
      if (yaw_ != 0F) {
        output.writeFloat(7, yaw_);
      }
      if (airspeed_ != 0F) {
        output.writeFloat(8, airspeed_);
      }
      if (velocity_ != 0F) {
        output.writeFloat(9, velocity_);
      }
      if (timestamp_ != 0L) {
        output.writeUInt64(10, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (lng_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, lng_);
      }
      if (lat_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, lat_);
      }
      if (altitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, altitude_);
      }
      if (ultrasonic_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, ultrasonic_);
      }
      if (pitch_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, pitch_);
      }
      if (roll_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, roll_);
      }
      if (yaw_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, yaw_);
      }
      if (airspeed_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, airspeed_);
      }
      if (velocity_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, velocity_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(10, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof TelemetryData)) {
        return super.equals(obj);
      }
      TelemetryData other = (TelemetryData) obj;

      if (Double.doubleToLongBits(getLng())
          != Double.doubleToLongBits(
              other.getLng())) return false;
      if (Double.doubleToLongBits(getLat())
          != Double.doubleToLongBits(
              other.getLat())) return false;
      if (Float.floatToIntBits(getAltitude())
          != Float.floatToIntBits(
              other.getAltitude())) return false;
      if (Float.floatToIntBits(getUltrasonic())
          != Float.floatToIntBits(
              other.getUltrasonic())) return false;
      if (Float.floatToIntBits(getPitch())
          != Float.floatToIntBits(
              other.getPitch())) return false;
      if (Float.floatToIntBits(getRoll())
          != Float.floatToIntBits(
              other.getRoll())) return false;
      if (Float.floatToIntBits(getYaw())
          != Float.floatToIntBits(
              other.getYaw())) return false;
      if (Float.floatToIntBits(getAirspeed())
          != Float.floatToIntBits(
              other.getAirspeed())) return false;
      if (Float.floatToIntBits(getVelocity())
          != Float.floatToIntBits(
              other.getVelocity())) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LNG_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getLng()));
      hash = (37 * hash) + LAT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          Double.doubleToLongBits(getLat()));
      hash = (37 * hash) + ALTITUDE_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getAltitude());
      hash = (37 * hash) + ULTRASONIC_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getUltrasonic());
      hash = (37 * hash) + PITCH_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getPitch());
      hash = (37 * hash) + ROLL_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getRoll());
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getYaw());
      hash = (37 * hash) + AIRSPEED_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getAirspeed());
      hash = (37 * hash) + VELOCITY_FIELD_NUMBER;
      hash = (53 * hash) + Float.floatToIntBits(
          getVelocity());
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static TelemetryData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TelemetryData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TelemetryData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TelemetryData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TelemetryData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TelemetryData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TelemetryData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TelemetryData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static TelemetryData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static TelemetryData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static TelemetryData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TelemetryData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(TelemetryData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TelemetryData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:TelemetryData)
        TelemetryDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Telemetry.internal_static_TelemetryData_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Telemetry.internal_static_TelemetryData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                TelemetryData.class, Builder.class);
      }

      // Construct using org.springblade.uav.proto.Telemetry.TelemetryData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        lng_ = 0D;

        lat_ = 0D;

        altitude_ = 0F;

        ultrasonic_ = 0F;

        pitch_ = 0F;

        roll_ = 0F;

        yaw_ = 0F;

        airspeed_ = 0F;

        velocity_ = 0F;

        timestamp_ = 0L;

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Telemetry.internal_static_TelemetryData_descriptor;
      }

      @Override
      public TelemetryData getDefaultInstanceForType() {
        return TelemetryData.getDefaultInstance();
      }

      @Override
      public TelemetryData build() {
        TelemetryData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public TelemetryData buildPartial() {
        TelemetryData result = new TelemetryData(this);
        result.lng_ = lng_;
        result.lat_ = lat_;
        result.altitude_ = altitude_;
        result.ultrasonic_ = ultrasonic_;
        result.pitch_ = pitch_;
        result.roll_ = roll_;
        result.yaw_ = yaw_;
        result.airspeed_ = airspeed_;
        result.velocity_ = velocity_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TelemetryData) {
          return mergeFrom((TelemetryData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(TelemetryData other) {
        if (other == TelemetryData.getDefaultInstance()) return this;
        if (other.getLng() != 0D) {
          setLng(other.getLng());
        }
        if (other.getLat() != 0D) {
          setLat(other.getLat());
        }
        if (other.getAltitude() != 0F) {
          setAltitude(other.getAltitude());
        }
        if (other.getUltrasonic() != 0F) {
          setUltrasonic(other.getUltrasonic());
        }
        if (other.getPitch() != 0F) {
          setPitch(other.getPitch());
        }
        if (other.getRoll() != 0F) {
          setRoll(other.getRoll());
        }
        if (other.getYaw() != 0F) {
          setYaw(other.getYaw());
        }
        if (other.getAirspeed() != 0F) {
          setAirspeed(other.getAirspeed());
        }
        if (other.getVelocity() != 0F) {
          setVelocity(other.getVelocity());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        TelemetryData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (TelemetryData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double lng_ ;
      /**
       * <pre>
       *经度
       * </pre>
       *
       * <code>double lng = 1;</code>
       */
      public double getLng() {
        return lng_;
      }
      /**
       * <pre>
       *经度
       * </pre>
       *
       * <code>double lng = 1;</code>
       */
      public Builder setLng(double value) {

        lng_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *经度
       * </pre>
       *
       * <code>double lng = 1;</code>
       */
      public Builder clearLng() {

        lng_ = 0D;
        onChanged();
        return this;
      }

      private double lat_ ;
      /**
       * <pre>
       *纬度
       * </pre>
       *
       * <code>double lat = 2;</code>
       */
      public double getLat() {
        return lat_;
      }
      /**
       * <pre>
       *纬度
       * </pre>
       *
       * <code>double lat = 2;</code>
       */
      public Builder setLat(double value) {

        lat_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *纬度
       * </pre>
       *
       * <code>double lat = 2;</code>
       */
      public Builder clearLat() {

        lat_ = 0D;
        onChanged();
        return this;
      }

      private float altitude_ ;
      /**
       * <pre>
       *海拔高度
       * </pre>
       *
       * <code>float altitude = 3;</code>
       */
      public float getAltitude() {
        return altitude_;
      }
      /**
       * <pre>
       *海拔高度
       * </pre>
       *
       * <code>float altitude = 3;</code>
       */
      public Builder setAltitude(float value) {

        altitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *海拔高度
       * </pre>
       *
       * <code>float altitude = 3;</code>
       */
      public Builder clearAltitude() {

        altitude_ = 0F;
        onChanged();
        return this;
      }

      private float ultrasonic_ ;
      /**
       * <pre>
       *相对高度
       * </pre>
       *
       * <code>float ultrasonic = 4;</code>
       */
      public float getUltrasonic() {
        return ultrasonic_;
      }
      /**
       * <pre>
       *相对高度
       * </pre>
       *
       * <code>float ultrasonic = 4;</code>
       */
      public Builder setUltrasonic(float value) {

        ultrasonic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *相对高度
       * </pre>
       *
       * <code>float ultrasonic = 4;</code>
       */
      public Builder clearUltrasonic() {

        ultrasonic_ = 0F;
        onChanged();
        return this;
      }

      private float pitch_ ;
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>float pitch = 5;</code>
       */
      public float getPitch() {
        return pitch_;
      }
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>float pitch = 5;</code>
       */
      public Builder setPitch(float value) {

        pitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>float pitch = 5;</code>
       */
      public Builder clearPitch() {

        pitch_ = 0F;
        onChanged();
        return this;
      }

      private float roll_ ;
      /**
       * <pre>
       *横滚角
       * </pre>
       *
       * <code>float roll = 6;</code>
       */
      public float getRoll() {
        return roll_;
      }
      /**
       * <pre>
       *横滚角
       * </pre>
       *
       * <code>float roll = 6;</code>
       */
      public Builder setRoll(float value) {

        roll_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *横滚角
       * </pre>
       *
       * <code>float roll = 6;</code>
       */
      public Builder clearRoll() {

        roll_ = 0F;
        onChanged();
        return this;
      }

      private float yaw_ ;
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>float yaw = 7;</code>
       */
      public float getYaw() {
        return yaw_;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>float yaw = 7;</code>
       */
      public Builder setYaw(float value) {

        yaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>float yaw = 7;</code>
       */
      public Builder clearYaw() {

        yaw_ = 0F;
        onChanged();
        return this;
      }

      private float airspeed_ ;
      /**
       * <pre>
       *空速
       * </pre>
       *
       * <code>float airspeed = 8;</code>
       */
      public float getAirspeed() {
        return airspeed_;
      }
      /**
       * <pre>
       *空速
       * </pre>
       *
       * <code>float airspeed = 8;</code>
       */
      public Builder setAirspeed(float value) {

        airspeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *空速
       * </pre>
       *
       * <code>float airspeed = 8;</code>
       */
      public Builder clearAirspeed() {

        airspeed_ = 0F;
        onChanged();
        return this;
      }

      private float velocity_ ;
      /**
       * <pre>
       *地速
       * </pre>
       *
       * <code>float velocity = 9;</code>
       */
      public float getVelocity() {
        return velocity_;
      }
      /**
       * <pre>
       *地速
       * </pre>
       *
       * <code>float velocity = 9;</code>
       */
      public Builder setVelocity(float value) {

        velocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *地速
       * </pre>
       *
       * <code>float velocity = 9;</code>
       */
      public Builder clearVelocity() {

        velocity_ = 0F;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       *时间戳
       * </pre>
       *
       * <code>uint64 timestamp = 10;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       *时间戳
       * </pre>
       *
       * <code>uint64 timestamp = 10;</code>
       */
      public Builder setTimestamp(long value) {

        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *时间戳
       * </pre>
       *
       * <code>uint64 timestamp = 10;</code>
       */
      public Builder clearTimestamp() {

        timestamp_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:TelemetryData)
    }

    // @@protoc_insertion_point(class_scope:TelemetryData)
    private static final TelemetryData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TelemetryData();
    }

    public static TelemetryData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TelemetryData>
        PARSER = new com.google.protobuf.AbstractParser<TelemetryData>() {
      @Override
      public TelemetryData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelemetryData> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<TelemetryData> getParserForType() {
      return PARSER;
    }

    @Override
    public TelemetryData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_TelemetryData_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_TelemetryData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\017Telemetry.proto\"\260\001\n\rTelemetryData\022\013\n\003l" +
      "ng\030\001 \001(\001\022\013\n\003lat\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\002\022" +
      "\022\n\nultrasonic\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\014\n\004ro" +
      "ll\030\006 \001(\002\022\013\n\003yaw\030\007 \001(\002\022\020\n\010airspeed\030\010 \001(\002\022" +
      "\020\n\010velocity\030\t \001(\002\022\021\n\ttimestamp\030\n \001(\004B&\n\031" +
      "org.springblade.uav.protoB\tTelemetryb\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_TelemetryData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_TelemetryData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_TelemetryData_descriptor,
        new String[] { "Lng", "Lat", "Altitude", "Ultrasonic", "Pitch", "Roll", "Yaw", "Airspeed", "Velocity", "Timestamp", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
